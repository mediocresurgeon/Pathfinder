using System;
using System.Linq;
using Core.Domain.Characters;
using Core.Domain.Spells;


namespace Core.Domain.Items.Enchantments.Paizo.CoreRulebook
{
    /// <summary>
    /// Grants the wearer of this armor DR 5/magic.
    /// </summary>
    internal sealed class Invulnerability : IArmorEnchantment
    {
        #region Constructor
        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="T:Core.Domain.Items.Enchantments.Paizo.CoreRulebook.Invulnerability"/> class.
        /// </summary>
        /// <param name="miracleWasUsed">If set to <c>true</c> Miracle was used to create this enchantment.</param>
        internal Invulnerability(bool miracleWasUsed)
        {
            this.Schools = miracleWasUsed
                         ? new School[] { School.Abjuration, School.Evocation }
                         : new School[] { School.Abjuration };
        }
        #endregion

        #region Properties
        private School[] Schools { get; }


        public INameFragment Name { get; } = new NameFragment("Invulnerability", "http://www.d20pfsrd.com/magic-items/magic-armor/magic-armor-and-shield-special-abilities/invulnerability/");


        public byte CasterLevel => 18;


        public byte SpecialAbilityBonus => 3;


        public double Cost => 0;
        #endregion

        #region Methods
        public School[] GetSchools() => this.Schools.ToArray(); // Returns a copy of the original array


        public void ApplyTo(ICharacter character)
        {
            if (null == character)
                throw new ArgumentNullException(nameof(character), "Argument may not be null.");
            character.DamageReduction?.Add(() => 5, "Magic");
        }


        public void Enchant(Armor.Armor armor)
        {
            // Intentionally blank
        }
        #endregion
    }
}