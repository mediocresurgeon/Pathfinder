using System;
using Core.Domain.Characters;
using Core.Domain.Characters.DamageReduction;
using Core.Domain.Items.Enchantments.Paizo.CoreRulebook;
using Core.Domain.Spells;
using Moq;
using NUnit.Framework;


namespace Core.Domain.UnitTests.Items.Enchantments.Paizo.CoreRulebook
{
    [TestFixture]
    [Parallelizable]
    public class InvulnerabilityTests
    {
        #region Constructor
        [Test(Description = "Ensures sensible defaults for a fresh instance of Invulnerability.")]
        public void Default()
        {
            // Arrange
            var enchantment = new Invulnerability(false);

            // Act


            // Assert
            Assert.AreEqual("Invulnerability", enchantment.Name.Text);
            Assert.AreEqual(18, enchantment.CasterLevel);
            Assert.AreEqual(3, enchantment.SpecialAbilityBonus);
            Assert.AreEqual(0, enchantment.Cost);
        }


        [Test(Description = "Ensures the correct schools for an Invulnerability enchantment which was not created with Miracle.")]
        public void GetSchools_MiracleNotUsed()
        {
            // Arrange
            var enchantment = new Invulnerability(false);

            // Act
            var schools = enchantment.GetSchools();

            // Assert
            Assert.That(schools, Is.EquivalentTo(new School[] { School.Abjuration }));
        }


        [Test(Description = "Ensures the correct schools for an Invulnerability enchantment which was created with Miracle.")]
        public void GetSchools_MiracleUsed()
        {
            // Arrange
            var enchantment = new Invulnerability(true);

            // Act
            var schools = enchantment.GetSchools();

            // Assert
            Assert.That(schools, Is.EquivalentTo(new School[] { School.Abjuration, School.Evocation }));
        }
        #endregion

        #region ApplyTo
        [Test(Description = "Ensures that Invulnerability cannot be applied to a null ICharacter.")]
        public void ApplyTo_NullCharacter_Throws()
        {
            // Arrange
            var enchantment = new Invulnerability(false);

            // Act
            TestDelegate applyTo = () => enchantment.ApplyTo(null);

            // Assert
            Assert.Throws<ArgumentNullException>(applyTo);
        }


        [Test(Description = "Ensures that Invulnerability cannot be applied to a null ICharacter.")]
        public void ApplyTo_ICharacter_BestowsDR()
        {
            // Arrange
            var damageReductions = Mock.Of<IDamageReductionTracker>();
            var mockCharacter = new Mock<ICharacter>();
            mockCharacter.Setup(c => c.DamageReduction)
                         .Returns(damageReductions);
            var enchantment = new Invulnerability(false);

            // Act
            enchantment.ApplyTo(mockCharacter.Object);

            // Assert
            Mock.Get(damageReductions)
                .Verify(dr => dr.Add(It.Is<Func<byte>>(calc => 5 == calc()),
                                     It.Is<string>(str => "Magic" == str)),
                        "Invulnerability armor enchantment failed to add DR 5/Magic to the ICharacter.");
        }
        #endregion
    }
}